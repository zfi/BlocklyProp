/*
 * This file is generated by jOOQ.
*/
package com.parallax.server.blocklyprop.db.generated.tables;


import com.parallax.server.blocklyprop.db.generated.Blocklyprop;
import com.parallax.server.blocklyprop.db.generated.Indexes;
import com.parallax.server.blocklyprop.db.generated.Keys;
import com.parallax.server.blocklyprop.db.generated.tables.records.ProjectSharingRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProjectSharing extends TableImpl<ProjectSharingRecord> {

    private static final long serialVersionUID = 1285242523;

    /**
     * The reference instance of <code>blocklyprop.project_sharing</code>
     */
    public static final ProjectSharing PROJECT_SHARING = new ProjectSharing();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProjectSharingRecord> getRecordType() {
        return ProjectSharingRecord.class;
    }

    /**
     * The column <code>blocklyprop.project_sharing.id</code>.
     */
    public final TableField<ProjectSharingRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>blocklyprop.project_sharing.id_project</code>.
     */
    public final TableField<ProjectSharingRecord, Long> ID_PROJECT = createField("id_project", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>blocklyprop.project_sharing.sharekey</code>.
     */
    public final TableField<ProjectSharingRecord, String> SHAREKEY = createField("sharekey", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>blocklyprop.project_sharing.active</code>.
     */
    public final TableField<ProjectSharingRecord, Boolean> ACTIVE = createField("active", org.jooq.impl.SQLDataType.BIT.defaultValue(org.jooq.impl.DSL.inline("b'1'", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * The column <code>blocklyprop.project_sharing.expires</code>.
     */
    public final TableField<ProjectSharingRecord, Boolean> EXPIRES = createField("expires", org.jooq.impl.SQLDataType.BIT.defaultValue(org.jooq.impl.DSL.inline("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * The column <code>blocklyprop.project_sharing.exprire_date</code>.
     */
    public final TableField<ProjectSharingRecord, Timestamp> EXPRIRE_DATE = createField("exprire_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>blocklyprop.project_sharing</code> table reference
     */
    public ProjectSharing() {
        this(DSL.name("project_sharing"), null);
    }

    /**
     * Create an aliased <code>blocklyprop.project_sharing</code> table reference
     */
    public ProjectSharing(String alias) {
        this(DSL.name(alias), PROJECT_SHARING);
    }

    /**
     * Create an aliased <code>blocklyprop.project_sharing</code> table reference
     */
    public ProjectSharing(Name alias) {
        this(alias, PROJECT_SHARING);
    }

    private ProjectSharing(Name alias, Table<ProjectSharingRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProjectSharing(Name alias, Table<ProjectSharingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Blocklyprop.BLOCKLYPROP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROJECT_SHARING_PRIMARY, Indexes.PROJECT_SHARING_PROJECT_SHARING_ID_PROJECT_SHAREKEY_UINDEX, Indexes.PROJECT_SHARING_PROJECT_SHARING_SHAREKEY_INDEX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProjectSharingRecord, Long> getIdentity() {
        return Keys.IDENTITY_PROJECT_SHARING;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProjectSharingRecord> getPrimaryKey() {
        return Keys.KEY_PROJECT_SHARING_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProjectSharingRecord>> getKeys() {
        return Arrays.<UniqueKey<ProjectSharingRecord>>asList(Keys.KEY_PROJECT_SHARING_PRIMARY, Keys.KEY_PROJECT_SHARING_PROJECT_SHARING_ID_PROJECT_SHAREKEY_UINDEX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ProjectSharingRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProjectSharingRecord, ?>>asList(Keys.PROJECT_SHARING_PROJECT_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProjectSharing as(String alias) {
        return new ProjectSharing(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProjectSharing as(Name alias) {
        return new ProjectSharing(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectSharing rename(String name) {
        return new ProjectSharing(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectSharing rename(Name name) {
        return new ProjectSharing(name, null);
    }
}
