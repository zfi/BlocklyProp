/*
 * This file is generated by jOOQ.
*/
package com.parallax.server.blocklyprop.db.generated.tables;


import com.parallax.server.blocklyprop.db.generated.Blocklyprop;
import com.parallax.server.blocklyprop.db.generated.Indexes;
import com.parallax.server.blocklyprop.db.generated.Keys;
import com.parallax.server.blocklyprop.db.generated.tables.records.AdminRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Admin extends TableImpl<AdminRecord> {

    private static final long serialVersionUID = -1183028593;

    /**
     * The reference instance of <code>blocklyprop.admin</code>
     */
    public static final Admin ADMIN = new Admin();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdminRecord> getRecordType() {
        return AdminRecord.class;
    }

    /**
     * The column <code>blocklyprop.admin.id</code>.
     */
    public final TableField<AdminRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>blocklyprop.admin.db_version</code>.
     */
    public final TableField<AdminRecord, Integer> DB_VERSION = createField("db_version", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>blocklyprop.admin.db_script</code>.
     */
    public final TableField<AdminRecord, String> DB_SCRIPT = createField("db_script", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>blocklyprop.admin.notes</code>.
     */
    public final TableField<AdminRecord, String> NOTES = createField("notes", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>blocklyprop.admin.last_change_date</code>.
     */
    public final TableField<AdminRecord, Timestamp> LAST_CHANGE_DATE = createField("last_change_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>blocklyprop.admin</code> table reference
     */
    public Admin() {
        this(DSL.name("admin"), null);
    }

    /**
     * Create an aliased <code>blocklyprop.admin</code> table reference
     */
    public Admin(String alias) {
        this(DSL.name(alias), ADMIN);
    }

    /**
     * Create an aliased <code>blocklyprop.admin</code> table reference
     */
    public Admin(Name alias) {
        this(alias, ADMIN);
    }

    private Admin(Name alias, Table<AdminRecord> aliased) {
        this(alias, aliased, null);
    }

    private Admin(Name alias, Table<AdminRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Blocklyprop.BLOCKLYPROP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ADMIN_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AdminRecord, Long> getIdentity() {
        return Keys.IDENTITY_ADMIN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AdminRecord> getPrimaryKey() {
        return Keys.KEY_ADMIN_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AdminRecord>> getKeys() {
        return Arrays.<UniqueKey<AdminRecord>>asList(Keys.KEY_ADMIN_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Admin as(String alias) {
        return new Admin(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Admin as(Name alias) {
        return new Admin(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Admin rename(String name) {
        return new Admin(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Admin rename(Name name) {
        return new Admin(name, null);
    }
}
