/*
 * This file is generated by jOOQ.
*/
package com.parallax.server.blocklyprop.db.generated.tables;


import com.parallax.server.blocklyprop.db.generated.Blocklyprop;
import com.parallax.server.blocklyprop.db.generated.Indexes;
import com.parallax.server.blocklyprop.db.generated.Keys;
import com.parallax.server.blocklyprop.db.generated.tables.records.SecUserRoleRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecUserRole extends TableImpl<SecUserRoleRecord> {

    private static final long serialVersionUID = 1246851757;

    /**
     * The reference instance of <code>blocklyprop.sec_user_role</code>
     */
    public static final SecUserRole SEC_USER_ROLE = new SecUserRole();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SecUserRoleRecord> getRecordType() {
        return SecUserRoleRecord.class;
    }

    /**
     * The column <code>blocklyprop.sec_user_role.id_user</code>.
     */
    public final TableField<SecUserRoleRecord, Long> ID_USER = createField("id_user", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>blocklyprop.sec_user_role.id_role</code>.
     */
    public final TableField<SecUserRoleRecord, Long> ID_ROLE = createField("id_role", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>blocklyprop.sec_user_role</code> table reference
     */
    public SecUserRole() {
        this(DSL.name("sec_user_role"), null);
    }

    /**
     * Create an aliased <code>blocklyprop.sec_user_role</code> table reference
     */
    public SecUserRole(String alias) {
        this(DSL.name(alias), SEC_USER_ROLE);
    }

    /**
     * Create an aliased <code>blocklyprop.sec_user_role</code> table reference
     */
    public SecUserRole(Name alias) {
        this(alias, SEC_USER_ROLE);
    }

    private SecUserRole(Name alias, Table<SecUserRoleRecord> aliased) {
        this(alias, aliased, null);
    }

    private SecUserRole(Name alias, Table<SecUserRoleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Blocklyprop.BLOCKLYPROP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SEC_USER_ROLE_FK_USER_ROLE_ROLE_IDX, Indexes.SEC_USER_ROLE_UNIQUE_USER_ROLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SecUserRoleRecord>> getKeys() {
        return Arrays.<UniqueKey<SecUserRoleRecord>>asList(Keys.KEY_SEC_USER_ROLE_UNIQUE_USER_ROLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<SecUserRoleRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SecUserRoleRecord, ?>>asList(Keys.FK_USER_ROLE_ROLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SecUserRole as(String alias) {
        return new SecUserRole(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SecUserRole as(Name alias) {
        return new SecUserRole(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SecUserRole rename(String name) {
        return new SecUserRole(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SecUserRole rename(Name name) {
        return new SecUserRole(name, null);
    }
}
