/*
 * This file is generated by jOOQ.
*/
package com.parallax.server.blocklyprop.db.generated;


import com.parallax.server.blocklyprop.db.generated.tables.Admin;
import com.parallax.server.blocklyprop.db.generated.tables.Friend;
import com.parallax.server.blocklyprop.db.generated.tables.FriendRequest;
import com.parallax.server.blocklyprop.db.generated.tables.FriendRequestEmail;
import com.parallax.server.blocklyprop.db.generated.tables.Motd;
import com.parallax.server.blocklyprop.db.generated.tables.Project;
import com.parallax.server.blocklyprop.db.generated.tables.ProjectSharing;
import com.parallax.server.blocklyprop.db.generated.tables.SecRole;
import com.parallax.server.blocklyprop.db.generated.tables.SecUserRole;
import com.parallax.server.blocklyprop.db.generated.tables.Session;
import com.parallax.server.blocklyprop.db.generated.tables.Tag;
import com.parallax.server.blocklyprop.db.generated.tables.User;
import com.parallax.server.blocklyprop.db.generated.tables.records.AdminRecord;
import com.parallax.server.blocklyprop.db.generated.tables.records.FriendRecord;
import com.parallax.server.blocklyprop.db.generated.tables.records.FriendRequestEmailRecord;
import com.parallax.server.blocklyprop.db.generated.tables.records.FriendRequestRecord;
import com.parallax.server.blocklyprop.db.generated.tables.records.MotdRecord;
import com.parallax.server.blocklyprop.db.generated.tables.records.ProjectRecord;
import com.parallax.server.blocklyprop.db.generated.tables.records.ProjectSharingRecord;
import com.parallax.server.blocklyprop.db.generated.tables.records.SecRoleRecord;
import com.parallax.server.blocklyprop.db.generated.tables.records.SecUserRoleRecord;
import com.parallax.server.blocklyprop.db.generated.tables.records.SessionRecord;
import com.parallax.server.blocklyprop.db.generated.tables.records.TagRecord;
import com.parallax.server.blocklyprop.db.generated.tables.records.UserRecord;

import javax.annotation.Generated;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>blocklyprop</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<AdminRecord, Long> IDENTITY_ADMIN = Identities0.IDENTITY_ADMIN;
    public static final Identity<FriendRecord, Long> IDENTITY_FRIEND = Identities0.IDENTITY_FRIEND;
    public static final Identity<FriendRequestRecord, Long> IDENTITY_FRIEND_REQUEST = Identities0.IDENTITY_FRIEND_REQUEST;
    public static final Identity<FriendRequestEmailRecord, Long> IDENTITY_FRIEND_REQUEST_EMAIL = Identities0.IDENTITY_FRIEND_REQUEST_EMAIL;
    public static final Identity<MotdRecord, Long> IDENTITY_MOTD = Identities0.IDENTITY_MOTD;
    public static final Identity<ProjectRecord, Long> IDENTITY_PROJECT = Identities0.IDENTITY_PROJECT;
    public static final Identity<ProjectSharingRecord, Long> IDENTITY_PROJECT_SHARING = Identities0.IDENTITY_PROJECT_SHARING;
    public static final Identity<SecRoleRecord, Long> IDENTITY_SEC_ROLE = Identities0.IDENTITY_SEC_ROLE;
    public static final Identity<TagRecord, Long> IDENTITY_TAG = Identities0.IDENTITY_TAG;
    public static final Identity<UserRecord, Long> IDENTITY_USER = Identities0.IDENTITY_USER;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AdminRecord> KEY_ADMIN_PRIMARY = UniqueKeys0.KEY_ADMIN_PRIMARY;
    public static final UniqueKey<FriendRecord> KEY_FRIEND_PRIMARY = UniqueKeys0.KEY_FRIEND_PRIMARY;
    public static final UniqueKey<FriendRecord> KEY_FRIEND_FRIEND_IDREQUESTUSER_IDREQUESTEDUSER_UINDEX = UniqueKeys0.KEY_FRIEND_FRIEND_IDREQUESTUSER_IDREQUESTEDUSER_UINDEX;
    public static final UniqueKey<FriendRequestRecord> KEY_FRIEND_REQUEST_PRIMARY = UniqueKeys0.KEY_FRIEND_REQUEST_PRIMARY;
    public static final UniqueKey<FriendRequestRecord> KEY_FRIEND_REQUEST_FRIEND_REQUEST_IDREQUESTUSER_IDREQUESTEDUSER_UINDEX = UniqueKeys0.KEY_FRIEND_REQUEST_FRIEND_REQUEST_IDREQUESTUSER_IDREQUESTEDUSER_UINDEX;
    public static final UniqueKey<FriendRequestEmailRecord> KEY_FRIEND_REQUEST_EMAIL_PRIMARY = UniqueKeys0.KEY_FRIEND_REQUEST_EMAIL_PRIMARY;
    public static final UniqueKey<FriendRequestEmailRecord> KEY_FRIEND_REQUEST_EMAIL_FRIEND_REQUEST_EMAIL_IDREQUESTUSER_IDREQUESTEDUSER_UINDEX = UniqueKeys0.KEY_FRIEND_REQUEST_EMAIL_FRIEND_REQUEST_EMAIL_IDREQUESTUSER_IDREQUESTEDUSER_UINDEX;
    public static final UniqueKey<FriendRequestEmailRecord> KEY_FRIEND_REQUEST_EMAIL_ACCEPT_KEY = UniqueKeys0.KEY_FRIEND_REQUEST_EMAIL_ACCEPT_KEY;
    public static final UniqueKey<MotdRecord> KEY_MOTD_PRIMARY = UniqueKeys0.KEY_MOTD_PRIMARY;
    public static final UniqueKey<ProjectRecord> KEY_PROJECT_PRIMARY = UniqueKeys0.KEY_PROJECT_PRIMARY;
    public static final UniqueKey<ProjectSharingRecord> KEY_PROJECT_SHARING_PRIMARY = UniqueKeys0.KEY_PROJECT_SHARING_PRIMARY;
    public static final UniqueKey<ProjectSharingRecord> KEY_PROJECT_SHARING_PROJECT_SHARING_ID_PROJECT_SHAREKEY_UINDEX = UniqueKeys0.KEY_PROJECT_SHARING_PROJECT_SHARING_ID_PROJECT_SHAREKEY_UINDEX;
    public static final UniqueKey<SecRoleRecord> KEY_SEC_ROLE_PRIMARY = UniqueKeys0.KEY_SEC_ROLE_PRIMARY;
    public static final UniqueKey<SecRoleRecord> KEY_SEC_ROLE_NAME_UNIQUE = UniqueKeys0.KEY_SEC_ROLE_NAME_UNIQUE;
    public static final UniqueKey<SecUserRoleRecord> KEY_SEC_USER_ROLE_UNIQUE_USER_ROLE = UniqueKeys0.KEY_SEC_USER_ROLE_UNIQUE_USER_ROLE;
    public static final UniqueKey<SessionRecord> KEY_SESSION_PRIMARY = UniqueKeys0.KEY_SESSION_PRIMARY;
    public static final UniqueKey<TagRecord> KEY_TAG_PRIMARY = UniqueKeys0.KEY_TAG_PRIMARY;
    public static final UniqueKey<TagRecord> KEY_TAG_NAME_UNIQUE = UniqueKeys0.KEY_TAG_NAME_UNIQUE;
    public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = UniqueKeys0.KEY_USER_PRIMARY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<FriendRecord, UserRecord> FRIEND_REQUEST_USER_ID_FK = ForeignKeys0.FRIEND_REQUEST_USER_ID_FK;
    public static final ForeignKey<FriendRecord, UserRecord> FRIEND_REQUESTED_USER_ID_FK = ForeignKeys0.FRIEND_REQUESTED_USER_ID_FK;
    public static final ForeignKey<FriendRequestRecord, UserRecord> FRIEND_REQUEST_REQUEST_USER_ID_FK = ForeignKeys0.FRIEND_REQUEST_REQUEST_USER_ID_FK;
    public static final ForeignKey<FriendRequestRecord, UserRecord> FRIEND_REQUEST_REQUESTED_USER_ID_FK = ForeignKeys0.FRIEND_REQUEST_REQUESTED_USER_ID_FK;
    public static final ForeignKey<FriendRequestEmailRecord, UserRecord> FRIEND_REQUEST_EMAIL_REQUEST_USER_ID_FK = ForeignKeys0.FRIEND_REQUEST_EMAIL_REQUEST_USER_ID_FK;
    public static final ForeignKey<ProjectSharingRecord, ProjectRecord> PROJECT_SHARING_PROJECT_ID_FK = ForeignKeys0.PROJECT_SHARING_PROJECT_ID_FK;
    public static final ForeignKey<SecUserRoleRecord, SecRoleRecord> FK_USER_ROLE_ROLE = ForeignKeys0.FK_USER_ROLE_ROLE;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 extends AbstractKeys {
        public static Identity<AdminRecord, Long> IDENTITY_ADMIN = createIdentity(Admin.ADMIN, Admin.ADMIN.ID);
        public static Identity<FriendRecord, Long> IDENTITY_FRIEND = createIdentity(Friend.FRIEND, Friend.FRIEND.ID);
        public static Identity<FriendRequestRecord, Long> IDENTITY_FRIEND_REQUEST = createIdentity(FriendRequest.FRIEND_REQUEST, FriendRequest.FRIEND_REQUEST.ID);
        public static Identity<FriendRequestEmailRecord, Long> IDENTITY_FRIEND_REQUEST_EMAIL = createIdentity(FriendRequestEmail.FRIEND_REQUEST_EMAIL, FriendRequestEmail.FRIEND_REQUEST_EMAIL.ID);
        public static Identity<MotdRecord, Long> IDENTITY_MOTD = createIdentity(Motd.MOTD, Motd.MOTD.ID);
        public static Identity<ProjectRecord, Long> IDENTITY_PROJECT = createIdentity(Project.PROJECT, Project.PROJECT.ID);
        public static Identity<ProjectSharingRecord, Long> IDENTITY_PROJECT_SHARING = createIdentity(ProjectSharing.PROJECT_SHARING, ProjectSharing.PROJECT_SHARING.ID);
        public static Identity<SecRoleRecord, Long> IDENTITY_SEC_ROLE = createIdentity(SecRole.SEC_ROLE, SecRole.SEC_ROLE.ID);
        public static Identity<TagRecord, Long> IDENTITY_TAG = createIdentity(Tag.TAG, Tag.TAG.ID);
        public static Identity<UserRecord, Long> IDENTITY_USER = createIdentity(User.USER, User.USER.ID);
    }

    private static class UniqueKeys0 extends AbstractKeys {
        public static final UniqueKey<AdminRecord> KEY_ADMIN_PRIMARY = createUniqueKey(Admin.ADMIN, "KEY_admin_PRIMARY", Admin.ADMIN.ID);
        public static final UniqueKey<FriendRecord> KEY_FRIEND_PRIMARY = createUniqueKey(Friend.FRIEND, "KEY_friend_PRIMARY", Friend.FRIEND.ID);
        public static final UniqueKey<FriendRecord> KEY_FRIEND_FRIEND_IDREQUESTUSER_IDREQUESTEDUSER_UINDEX = createUniqueKey(Friend.FRIEND, "KEY_friend_friend_idRequestUser_idRequestedUser_uindex", Friend.FRIEND.IDREQUESTUSER, Friend.FRIEND.IDREQUESTEDUSER);
        public static final UniqueKey<FriendRequestRecord> KEY_FRIEND_REQUEST_PRIMARY = createUniqueKey(FriendRequest.FRIEND_REQUEST, "KEY_friend_request_PRIMARY", FriendRequest.FRIEND_REQUEST.ID);
        public static final UniqueKey<FriendRequestRecord> KEY_FRIEND_REQUEST_FRIEND_REQUEST_IDREQUESTUSER_IDREQUESTEDUSER_UINDEX = createUniqueKey(FriendRequest.FRIEND_REQUEST, "KEY_friend_request_friend_request_idRequestUser_idRequestedUser_uindex", FriendRequest.FRIEND_REQUEST.IDREQUESTUSER, FriendRequest.FRIEND_REQUEST.IDREQUESTEDUSER);
        public static final UniqueKey<FriendRequestEmailRecord> KEY_FRIEND_REQUEST_EMAIL_PRIMARY = createUniqueKey(FriendRequestEmail.FRIEND_REQUEST_EMAIL, "KEY_friend_request_email_PRIMARY", FriendRequestEmail.FRIEND_REQUEST_EMAIL.ID);
        public static final UniqueKey<FriendRequestEmailRecord> KEY_FRIEND_REQUEST_EMAIL_FRIEND_REQUEST_EMAIL_IDREQUESTUSER_IDREQUESTEDUSER_UINDEX = createUniqueKey(FriendRequestEmail.FRIEND_REQUEST_EMAIL, "KEY_friend_request_email_friend_request_email_idRequestUser_idRequestedUser_uindex", FriendRequestEmail.FRIEND_REQUEST_EMAIL.IDREQUESTUSER, FriendRequestEmail.FRIEND_REQUEST_EMAIL.EMAIL);
        public static final UniqueKey<FriendRequestEmailRecord> KEY_FRIEND_REQUEST_EMAIL_ACCEPT_KEY = createUniqueKey(FriendRequestEmail.FRIEND_REQUEST_EMAIL, "KEY_friend_request_email_accept_Key", FriendRequestEmail.FRIEND_REQUEST_EMAIL.ACCEPT_KEY);
        public static final UniqueKey<MotdRecord> KEY_MOTD_PRIMARY = createUniqueKey(Motd.MOTD, "KEY_motd_PRIMARY", Motd.MOTD.ID);
        public static final UniqueKey<ProjectRecord> KEY_PROJECT_PRIMARY = createUniqueKey(Project.PROJECT, "KEY_project_PRIMARY", Project.PROJECT.ID);
        public static final UniqueKey<ProjectSharingRecord> KEY_PROJECT_SHARING_PRIMARY = createUniqueKey(ProjectSharing.PROJECT_SHARING, "KEY_project_sharing_PRIMARY", ProjectSharing.PROJECT_SHARING.ID);
        public static final UniqueKey<ProjectSharingRecord> KEY_PROJECT_SHARING_PROJECT_SHARING_ID_PROJECT_SHAREKEY_UINDEX = createUniqueKey(ProjectSharing.PROJECT_SHARING, "KEY_project_sharing_project_sharing_id_project_sharekey_uindex", ProjectSharing.PROJECT_SHARING.ID_PROJECT, ProjectSharing.PROJECT_SHARING.SHAREKEY);
        public static final UniqueKey<SecRoleRecord> KEY_SEC_ROLE_PRIMARY = createUniqueKey(SecRole.SEC_ROLE, "KEY_sec_role_PRIMARY", SecRole.SEC_ROLE.ID);
        public static final UniqueKey<SecRoleRecord> KEY_SEC_ROLE_NAME_UNIQUE = createUniqueKey(SecRole.SEC_ROLE, "KEY_sec_role_name_UNIQUE", SecRole.SEC_ROLE.NAME);
        public static final UniqueKey<SecUserRoleRecord> KEY_SEC_USER_ROLE_UNIQUE_USER_ROLE = createUniqueKey(SecUserRole.SEC_USER_ROLE, "KEY_sec_user_role_UNIQUE_user_role", SecUserRole.SEC_USER_ROLE.ID_USER, SecUserRole.SEC_USER_ROLE.ID_ROLE);
        public static final UniqueKey<SessionRecord> KEY_SESSION_PRIMARY = createUniqueKey(Session.SESSION, "KEY_session_PRIMARY", Session.SESSION.IDSESSION);
        public static final UniqueKey<TagRecord> KEY_TAG_PRIMARY = createUniqueKey(Tag.TAG, "KEY_tag_PRIMARY", Tag.TAG.ID);
        public static final UniqueKey<TagRecord> KEY_TAG_NAME_UNIQUE = createUniqueKey(Tag.TAG, "KEY_tag_name_UNIQUE", Tag.TAG.NAME);
        public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = createUniqueKey(User.USER, "KEY_user_PRIMARY", User.USER.ID);
    }

    private static class ForeignKeys0 extends AbstractKeys {
        public static final ForeignKey<FriendRecord, UserRecord> FRIEND_REQUEST_USER_ID_FK = createForeignKey(com.parallax.server.blocklyprop.db.generated.Keys.KEY_USER_PRIMARY, Friend.FRIEND, "friend_request_user_id_fk", Friend.FRIEND.IDREQUESTUSER);
        public static final ForeignKey<FriendRecord, UserRecord> FRIEND_REQUESTED_USER_ID_FK = createForeignKey(com.parallax.server.blocklyprop.db.generated.Keys.KEY_USER_PRIMARY, Friend.FRIEND, "friend_requested_user_id_fk", Friend.FRIEND.IDREQUESTEDUSER);
        public static final ForeignKey<FriendRequestRecord, UserRecord> FRIEND_REQUEST_REQUEST_USER_ID_FK = createForeignKey(com.parallax.server.blocklyprop.db.generated.Keys.KEY_USER_PRIMARY, FriendRequest.FRIEND_REQUEST, "friend_request_request_user_id_fk", FriendRequest.FRIEND_REQUEST.IDREQUESTUSER);
        public static final ForeignKey<FriendRequestRecord, UserRecord> FRIEND_REQUEST_REQUESTED_USER_ID_FK = createForeignKey(com.parallax.server.blocklyprop.db.generated.Keys.KEY_USER_PRIMARY, FriendRequest.FRIEND_REQUEST, "friend_request_requested_user_id_fk", FriendRequest.FRIEND_REQUEST.IDREQUESTEDUSER);
        public static final ForeignKey<FriendRequestEmailRecord, UserRecord> FRIEND_REQUEST_EMAIL_REQUEST_USER_ID_FK = createForeignKey(com.parallax.server.blocklyprop.db.generated.Keys.KEY_USER_PRIMARY, FriendRequestEmail.FRIEND_REQUEST_EMAIL, "friend_request_email_request_user_id_fk", FriendRequestEmail.FRIEND_REQUEST_EMAIL.IDREQUESTUSER);
        public static final ForeignKey<ProjectSharingRecord, ProjectRecord> PROJECT_SHARING_PROJECT_ID_FK = createForeignKey(com.parallax.server.blocklyprop.db.generated.Keys.KEY_PROJECT_PRIMARY, ProjectSharing.PROJECT_SHARING, "project_sharing_project_id_fk", ProjectSharing.PROJECT_SHARING.ID_PROJECT);
        public static final ForeignKey<SecUserRoleRecord, SecRoleRecord> FK_USER_ROLE_ROLE = createForeignKey(com.parallax.server.blocklyprop.db.generated.Keys.KEY_SEC_ROLE_PRIMARY, SecUserRole.SEC_USER_ROLE, "FK_USER_ROLE_ROLE", SecUserRole.SEC_USER_ROLE.ID_ROLE);
    }
}
